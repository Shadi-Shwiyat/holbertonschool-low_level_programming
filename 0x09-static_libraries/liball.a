!<arch>
0-isupper.c/    0           0     0     644     372       `
#include "main.h"

/**
 *  * _isupper - checks for upper case character
 *   * and returns a 1 if it exist and 0 if not
 *    *
 *     * @c: the character that is checked
 *      *
 *       * Return: 1 if uppercase otherwise 0
 *        */

int _isupper(int c)
{
		if (c >= 65 && c <= 90)
				{
							return (1);
								}
			else
					{
								return (0);
									}
}
0-memset.c/     0           0     0     644     443       `
#include "main.h"

/**
 *  * *_memset - function fills memory with a constant byte
 *   *
 *    * @s: a pointer to the memory area (buffer)
 *     * @b: the byte to fill in memory
 *      * @n: number of bytes to fill
 *       *
 *        * Return: a pointer to the memory area s
 *         */

char *_memset(char *s, char b, unsigned int n)
{
		unsigned int i = 0;

			for (; i < n; i++)
					{
								s[i] = b;
									}
				return (s);
}

0-strcat.c/     0           0     0     644     636       `
#include "main.h"

/**
 *  * *_strcat - function concatenates two different
 *   * strings
 *    * @dest: the string that has the source added to the end
 *     * @src: the string that is added to the end of dest
 *      *
 *       * Return: a pointer to the resulting string dest
 *        */

char *_strcat(char *dest, char *src)
{
		int destlen = 0;
			int srclen = 0;

				while (dest[destlen] != '\0')
						{
									destlen++;
										}

					while (src[srclen] != '\0')
							{
										dest[destlen + srclen] = src[srclen];
												srclen++;
													}
						dest[destlen + srclen] = '\0';
							return (dest);
}
100-atoi.c/     0           0     0     644     734       `
#include "main.h"
/**
 *  * _atoi - converts a string to an integer.
 *   * @s: the string to convert
 *    * Return: the converted string.
 *     */
int _atoi(char *s)
{
		short boolean;
			int i, minus, result;

				i = minus = result = boolean = 0;
					minus = -1;

						while (s[i] != '\0')
								{
											if (s[i] == '-')
															minus *= -1;

													if (s[i] >= '0' && s[i] <= '9')
																{
																				result *= 10;
																							result -= (s[i] - '0');
																										boolean = 1;
																												}
															else if (boolean == 1)
																			break;
																	i++;
																		}
							result *= minus;
								return (result);
}
1-isdigit.c/    0           0     0     644     361       `
#include "main.h"

/**
 *  * _isdigit - checks for a digit and
 *   * returns a 1 if it exist and 0 if not
 *    *
 *     * @c: the character that is checked
 *      *
 *       * Return: 1 if digit exist otherwise 0
 *        */

int _isdigit(int c)
{
		if (c >= 48 && c <= 57)
				{
							return (1);
								}
			else
					{
								return (0);
									}
}

1-memcpy.c/     0           0     0     644     447       `
#include "main.h"

/**
 *  * *_memcpy - function copies memory area
 *   *
 *    * @dest: a pointer to the memory area (buffer)
 *     * @src: the source to copy
 *      * @n: number of things to copy
 *       *
 *        * Return: a pointer to the memory area dest
 *         */

char *_memcpy(char *dest, char *src, unsigned int n)
{
		unsigned int i = 0;

			for (; i < n; i++)
					{
								dest[i] = src[i];
									}
				return (dest);
}


1-strncat.c/    0           0     0     644     774       `
#include "main.h"

/**
 *  * *_strncat - function concatenates two different
 *   * strings but stops copying the src at the value of n
 *    * @dest: the string that has the source added to the end
 *     * @src: the string that is added to the end of dest
 *      * @n: the number of characters to stop on src
 *       *
 *        *
 *         * Return: a pointer to the resulting string dest
 *          */

char *_strncat(char *dest, char *src, int n)
{
		int destlen = 0;
			int srclen = 0;

				while (dest[destlen] != '\0')
						{
									destlen++;
										}

					while (srclen < n && src[srclen] != '\0')
							{
										dest[destlen + srclen] = src[srclen];
												srclen++;
													}
						dest[destlen + srclen] = '\0';
							return (dest);
}
2-strchr.c/     0           0     0     644     451       `
#include "main.h"
/**
 *  * _strchr - locates a character in a string
 *   * @s: string to look in
 *    * @c: character to locate
 *     *
 *      * Return: Pointer to first occurrence of character c in s or NULL if not found
 *       *
 *        */

char *_strchr(char *s, char c)
{
		while (*s != '\0')
				{
							if (*s == c)
											return (s);
									s++;
											if (*s == c)
															return (s);
												}
			return (0);
}

2-strlen.c/     0           0     0     644     304       `
#include "main.h"
/**
 *  * _strlen - returns length of given string
 *   * @s: given string to get length
 *    *
 *     *
 *      * Return: Length of s
 *       *
 *        */

int _strlen(char *s)
{
		int i = 0;

			while (*s != '\0')
					{
								s++;
										i++;
											}
				return (i);
}
2-strncpy.c/    0           0     0     644     698       `
#include "main.h"

/**
 *  * *_strncpy - function copies two string together
 *   *
 *    * @dest: the string that has the source added to the end
 *     * @src: the string that is added to the end of dest
 *      * @n: the number of characters to stop on src
 *       *
 *        *
 *         * Return: a pointer to the resulting string dest
 *          **/

char *_strncpy(char *dest, char *src, int n)
{
		int destlen = 0;
			int srclen = 0;


				for (; srclen < n && src[srclen] != '\0'; srclen++)
						{
									dest[destlen] = src[srclen];
											destlen++;
												}
					for (; destlen < n; destlen++)
							{
										dest[destlen] = '\0';
											}
						return (dest);
}
3-islower.c/    0           0     0     644     273       `
#include "main.h"
/**
 * * _islower - checks to see if input char is lowercase
 * *
 * * @c: The character to be checked
 * * Return: 1 if lowercase and 0 otherwise
 * *
 * */
int _islower(int c)
{
		if (c >= 'a' && c <= 'z')

					return (1);
			else
						return (0);
}


3-puts.c/       0           0     0     644     292       `
#include "main.h"

/**
 *  * _puts - function prints a string to stdout
 *   *
 *    *@str: string to output
 *     *
 *      *
 *       * Return: Void
 *        */

void _puts(char *str)
{
		for (; *str != '\0';)
				{
							_putchar(*str);
									str++;
										}
			_putchar('\n');
}
3-strcmp.c/     0           0     0     644     443       `
#include "main.h"

/**
 * * _strcmp - compares two strings
 * * @s1: points to characters in string 1
 * * @s2: points to characters in string 2
 * *
 * * Return: vluse less that 0 if string is less that other
 * * value greater 0 in other string
 * * 0 if strings are the same
 * */

int _strcmp(char *s1, char *s2)

{
		int i;

			for (i = 0; s1[i] != '\0'; i++)
						if (s1[i] != s2[i])
										return (s1[i] - s2[i]);
				return (0);
}

3-strspn.c/     0           0     0     644     1196      `
#include "main.h"
/**
 *  * _strspn - gets length of a prefix substring
 *   * @s: string to look in
 *    * @accept: prefix to check with
 *     *
 *      * Return: length of prefix substring in string
 *       *
 *        */
#include "main.h"

/**
 *  * *_strspn - function get the length of a prefix substring
 *   *
 *    * @s: the string to search
 *     * @accept: the list of bytes to check for
 *      *
 *       * Return: number of bytes in initial
 *        *	segment s, which consist only of
 *         *	bytes from accept
 *          */

unsigned int _strspn(char *s, char *accept)
{
		unsigned int initial_length = 0;
			unsigned int len1 = 0;
				unsigned int len2 = 0;
					unsigned int i, j;

						while (s[len1] != 32)
								{
											len1++;
												}
							while (accept[len2] != '\0')
									{
												len2++;
													}

								for (i = 0; i < len1; i++)
										{
													for (j = 0; j < len2; j++)
																{
																				if (accept[j] == s[i])
																								{
																													initial_length++;
																																}
																						}
														}


									return (initial_length);
}
4-isalpha.c/    0           0     0     644     460       `
#include "main.h"
/**
 *  * _isalpha - Checks if a character is alphabetic.
 *   * @c: The character to be checked.
 *    *
 *     * Return: 1 if character is letter, lowercase or uppercase, 0 otherwise.
 *      */
int _isalpha(int c)
{
		char i;

			for (i = 'a'; i <= 'z'; i++)
					{
								if (c == i)
												return (1);
									}
				for (i = 'A'; i <= 'Z'; i++)
						{
									if (c == i)
													return (1);
										}
					return (0);
}
4-strpbrk.c/    0           0     0     644     545       `
#include "main.h"
/**
 *  * _strpbrk - searches a string for any of a set of bytes
 *   * @s: string to search
 *    * @accept: bytes to look for in string to search
 *     *
 *      * Return: 0 if nothing found otherwise a pointer to first occurence
 *       *
 *        */

char *_strpbrk(char *s, char *accept)
{
		int j;

			while (*s != '\0')
					{
								for (j = 0; accept[j] != '\0'; j++)
											{
															if (*s == accept[j])
																				return (s);
																	}
										s++;
											}
				return (0);
}

5-strstr.c/     0           0     0     644     1086      `
#include "main.h"
/**
 *  * _strstr - locates a substring in string
 *   * @haystack: stack of hay to search
 *    * @needle: needle to find
 *     *
 *      * Return: first occurence of the needle otherwise null
 *       *
 *        */

char *_strstr(char *haystack, char *needle)
{
		int i = 0;
			int j;

				if (*needle == '\0')
							return (haystack);
					for (i = 0; haystack[i] != '\0'; i++)
							{
										if (haystack[i] == needle[0])
													{
																	for (j = 0; needle[j] != '\0'; j++)
																					{
																										if (haystack[i + j] == '\0')
																																break;
																														if (needle[j] == haystack[i + j])
																																				continue;
																																		break;
																																					}
																				if (needle[j] == '\0')
																								{
																													haystack += i;
																																	return (haystack);
																																				}
																						}
											}
						return (0);
}
6-abs.c/        0           0     0     644     267       `
#include "main.h"
/**
 *  * _abs - computes the absolute value of an integer
 *   * @num: get abs of this parameter
 *    *
 *     * Return: the abs of the parameter
 *      *
 *       */

int _abs(int num)
{
		if (num < 0)
					return (num * -1);
			return (num);
}

9-strcpy.c/     0           0     0     644     469       `
#include "main.h"
/**
 *  * _strcpy - copies string to another string
 *   * @dest: destination of string cpy
 *    * @src: String to copy
 *     *
 *      * Return: string to copy
 *       *
 *        */

char *_strcpy(char *dest, char *src)
{
		int length = 0;
			char *string = src;

				while (*src != '\0')
						{
									*dest = *src;
											length++;
													dest++;
															src++;
																}
					*dest = '\0';
						return (string);
}

main.c/         0           0     0     644     154       `
#include "main.h"

int main(void)
{
	    _puts("\"At the end of the day, my goal was to be the best hacker\"\n\t- Kevin Mitnick");
	        return (0);
}
_putchar.c/     0           0     0     644     281       `
#include <unistd.h>

/**
 *  * _putchar - writes the character c to stdout
 *   * @c: The character to print
 *    *
 *     * Return: On success 1.
 *      * On error, -1 is returned, and errno is set appropriately.
 *       */
int _putchar(char c)
{
		return (write(1, &c, 1));
}

